plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
    // jacoco
    id 'jacoco'
}

ext {
    springCloudVersion = "2023.0.2"
}

group = 'org.click'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    runtimeOnly 'com.h2database:h2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
    }
}

jacocoTestCoverageVerification{
    violationRules {
        enabled = true
        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 100
            }
        }
        rule {
            element = 'CLASS'
            includes = [
                    'com.click.friend.service.**'
            ]
            limit {
                value = 'COVEREDRATIO'
                minimum = 0.9
            }
        }
    }
}

jacocoTestReport {
    dependsOn test
    reports{
        html.required = true
    }
    finalizedBy('jacocoTestCoverageVerification')
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy('jacocoTestReport')
}
